#!/bin/bash
#
#
# Caddy Web Server Installer
#
#

# Global config
caddyname="Caddy Web Server"
caddypath="/opt/caddyserver"
caddyuser="caddy"
caddyfile="/etc/Caddyfile"
caddywww="/var/caddywww"
caddylog="/var/log/caddy"
cwsiv="v2.3 beta (03 Apr 2016)"

about () {
	echo ""
	echo "  ========================================================= "
	echo "  \             Caddy Web Server Installer                / "
	echo "  \               $cwsiv                 / "
	echo "  \             Created by Sayem Chowdhury                / "
	echo "  \             Caddy Web: Caddyserver.com                / "
	echo "  ========================================================= "
	echo ""
}

howto () {
	echo "  Welcome!"
	echo "  run $(tput setaf 3)caddy help $(tput sgr0) for help"
	echo ""
}

prms () {
	echo ""
	echo "  caddy start          - Start $caddyname"
	echo "  caddy stop           - Stop/Shutdown $caddyname"
	echo "  caddy restart        - Restart $caddyname"
	echo "  caddy status         - Check $caddyname running or not"
	echo "  caddy install        - Install $caddyname on fresh OS"
	echo "  caddy service        - Make $caddyname a service (upstart/systemd)"
	echo "  caddy update         - Update $caddyname"
	echo "  caddy delete         - Uninstall Caddy and data."
	echo "  caddy about          - About Caddy Web Server Installer"
	echo ""
}

startcaddy () {
	pids=`ps aux | grep $caddypath/caddy | grep -v grep | awk '{ print $2 }'`
	if [ -z "$pids" ] ; then
		echo ""
		echo -n "  Starting $caddyname..."
		if [[ -e /etc/init/caddy.conf || -e /etc/systemd/system/caddy.service ]]; then
			service caddy start
		else
			sudo -H -u $caddyuser $caddypath/caddy -conf="$caddyfile" -quiet=true -agree &
		fi
		echo "  $(tput setaf 2)DONE$(tput sgr0)"
		echo ""
	else
		echo ""
		echo "  $caddyname is already $(tput setaf 2)running$(tput sgr0) on: $pids (PID)"
		echo ""
	fi
}

stopcaddy () {
	pids=`ps aux | grep $caddypath/caddy | grep -v grep | awk '{ print $2 }' | sort -r`
	if [ -z "$pids" ] ; then
		echo ""
		echo "  $caddyname is $(tput setaf 1)NOT running$(tput sgr0)"
		echo ""
	else
		echo ""
		echo -n "  Shutting down $caddyname..."
		if [[ -e /etc/init/caddy.conf || -e /etc/systemd/system/caddy.service ]]; then
			service caddy stop
		else
			kill $pids
			rm -f $pids
		fi
		echo "  $(tput setaf 2)DONE$(tput sgr0)"
		echo ""
	fi
}

caddystatus () {
	if [[ ! -e $caddypath/caddy ]]; then
	echo ""
	echo "  Caddy is not installed."
	echo "  run $(tput setaf 3)caddy install$(tput sgr0) to install $caddyname"
	echo ""
	exit
	fi
	#Detect Caddy process
	pids=`ps aux | grep $caddypath/caddy | grep -v grep | awk '{ print $2 }'`
	if [ -z "$pids" ] ; then
		echo ""
		echo "  $caddyname is $(tput setaf 1)NOT running$(tput sgr0)"
	else
		caddymemusage=`ps axo rss,comm,pid | grep $pids | awk '{$1/=1024;printf "%.0fMB\t",$1}{print $2}' | awk '{print $1}'`
		echo ""
		echo "  $caddyname is $(tput setaf 2)running$(tput sgr0)"
		echo "  Caddy (PID: $pids) is using $caddymemusage RAM"
	fi
	echo ""
}

installcaddy () {
	echo ""
	#Detetcting Caddy installed or not
	if [[ -e "$caddypath/caddy" ]]; then
		echo "  $caddyname is already installed on"
		echo "  $caddypath/caddy"
		echo ""
		exit;
	fi
	#Detect architecture
	if [ -n "$(uname -m | grep 64)" ]; then
		cpubits="arch=amd64"
		cpubitsname="for (64bit)..."
	elif [ -n "$(uname -m | grep 86)" ]; then
		cpubits="arch=386"
		cpubitsname="for (32bit)..."
	elif [ -n "$(uname -m | grep armv5)" ]; then
		cpubits="arch=arm&arm=5"
		cpubitsname="for (ARM 5)..."
	elif [ -n "$(uname -m | grep armv6l)" ]; then
		cpubits="arch=arm&arm=6"
		cpubitsname="for (ARM 6)..."
	elif [ -n "$(uname -m | grep armv7l)" ]; then
		cpubits="arch=arm&arm=7"
		cpubitsname="for (ARM 7)..."
	else
		echo "unsupported or unknown architecture"
		echo ""
		exit;
	fi
	#Installing Caddy
	echo -n "  Downloading $caddyname $cpubitsname" #Caddy linux
	wget -q "https://caddyserver.com/download/build?os=linux&$cpubits&features=" -O "caddy_linux_custom.tar.gz"
	echo "  $(tput setaf 2)DONE$(tput sgr0)"
	#Creating folders
	echo ""
	mkdir -p $caddypath
	mkdir -p $caddylog
	#Extract Caddy on created folder
	echo -n "  Extracting $caddyname to $caddypath..."
	tar xzf caddy_linux_custom.tar.gz -C $caddypath #Extracting Caddy
	echo " $(tput setaf 2)DONE$(tput sgr0)"
	rm -rf caddy_linux_custom.tar.gz #Deleting Caddy archive
	echo ""
	#Creating non-root user
	useradd -r -d $caddypath -s /bin/false $caddyuser
	chown $caddyuser $caddypath
	chown $caddyuser $caddylog
	#Installing required php files
	echo -n "  Installing required php files..."
	#Detecting apt-get/yum
	whichaptget=`which apt-get`
	whichyum=`which yum`
	if [[ -e "$whichaptget" ]]; then
	apt-get install php5-fpm php5-cli curl sudo -y &>/dev/null
	elif [[ -e "$whichyum" ]]; then
	yum install php-fpm php-cli curl sudo -y &>/dev/null
	else
	echo "$(tput setaf 1)FAILED$(tput sgr0)"
	fi
	echo "  $(tput setaf 2)DONE$(tput sgr0)"
	#Port setup
	setcap cap_net_bind_service=+ep $caddypath/caddy &>/dev/null
	echo "  Installed"
}

caddyfile () {
	#Check if Caddyfile exist
	#Generate Caddyfile
	if [[ ! -e $caddyfile ]]; then
	echo ""
	echo "  Enter your domain name"
	echo "  Seperated by comma"
	read -p "  Domain name: " domainname
	echo ""
	echo "  Enter your email for automated ssl"
	read -p "  Email: " domainmail
	echo "$domainname
tls $domainmail
root $caddywww
gzip
log $caddylog/access.log
errors $caddylog/error.log
fastcgi / /var/run/php5-fpm.sock php" >> $caddyfile
	echo "  Caddyfile created"
	else
	echo "  Caddyfile found. Skip... "
	fi
	#Check if caddywww exist
	if [[ ! -e $caddywww ]]; then
	mkdir -p $caddywww
	chown $caddyuser $caddywww
	fi
	#Generate example html
	if [[ ! -e $caddywww/index.html ]]; then
	echo "<TITLE>Caddy Default Page</TITLE>

<h1><font color="green">It works!</font></h1>

<h3><font color="grey">This is the default welcome page used to test the correct operation of the Caddy web server after installation via Caddy Web Server Installer.</font></h3>

<h3><font color="grey">If you can read this page, it means that the Caddy web server installed at this site is working properly.<br>
You should <font color="#D03C3C">replace this file</font>
(located at <tt>$caddywww/index.html</tt>) before continuing to operate your server.</font></h3>
</hr>
<h3><font color="grey">If you are a normal user of this web site and don't know what this page is about, this probably means that the site is currently unavailable due to maintenance.</font></h3>" >> $caddywww/index.html
	echo "  index.html created"
	else
	echo "  index.html found. Skip ... "
	fi
	echo "  Done. Caddy has been installed :)"
	echo "  Run $(tput setaf 3)caddy start$(tput sgr0) to start $caddyname"
	echo ""

}

updatecaddy () {
	#Detetcting Caddy installed or not
	if [[ ! -e "$caddypath/caddy" ]]; then
		echo ""
		echo "  $caddyname is not installed"
		sleep 0.2
		echo "  run $(tput setaf 3)caddy install$(tput sgr0) to install $caddyname"
		echo ""
		exit;
	fi
	#Detect architecture
	if [ -n "$(uname -m | grep 64)" ]; then
		cpubits="arch=amd64"
		cpubitsname="for (64bit)..."
	elif [ -n "$(uname -m | grep 86)" ]; then
		cpubits="arch=386"
		cpubitsname="for (32bit)..."
	elif [ -n "$(uname -m | grep armv5)" ]; then
		cpubits="arch=arm&arm=5"
		cpubitsname="for (ARM 5)..."
	elif [ -n "$(uname -m | grep armv6l)" ]; then
		cpubits="arch=arm&arm=6"
		cpubitsname="for (ARM 6)..."
	elif [ -n "$(uname -m | grep armv7l)" ]; then
		cpubits="arch=arm&arm=7"
		cpubitsname="for (ARM 7)..."
	else
		echo "unsupported or unknown architecture"
		echo ""
		exit;
	fi
	#Updating Caddy
	caddyserverversion=`$caddypath/caddy -version | awk '{print}'`
	echo ""
	echo "  Found $caddyserverversion"
	echo -n "  Downloading $caddyname $cpubitsname" #Caddy linux
	wget -q "https://caddyserver.com/download/build?os=linux&$cpubits&features=" -O "caddy_linux_custom.tar.gz"
	echo "  $(tput setaf 2)DONE$(tput sgr0)"
	sleep 0.1
	#Delete Caddy folder
	echo "  Removing Caddy directory $caddypath"
	sleep 0.3
	rm -rf $caddypath/*
	echo "  Done"
	sleep 0.1
	#Extract Caddy on created folder
	echo "  Extracting $caddyname to $caddypath"
	tar xzf caddy_linux_custom.tar.gz -C $caddypath #Extracting Caddy
	echo "  Done"
	setcap cap_net_bind_service=+ep $caddypath/caddy
	rm -rf caddy_linux_custom.tar.gz #Deleting Caddy archive
	echo ""
	echo "  Updated $caddyserverversion"
	echo ""
}

makeservice () {
  # Heuristic check for init > TODO improve!
	init=`cat /proc/1/comm`
	if [ "$init" == 'init' ]; then

		cat > /etc/init/caddy.conf <<EOL
# ${caddyname} Service

description     "${caddyname}"

start on (net-device-up	and runlevel [2345])
stop on runlevel [016]

setuid ${caddyuser}

respawn
respawn limit 10 5

limit nofile 4096 4096

pre-start script
 [ ! -f "${caddyfile}" ] && { stop; exit 1; }
 [ ! -e "${caddypath}/caddy" ] && { stop; exit 1; }
 service php5-fpm start
 exit 0
end script

exec ${caddypath}/caddy -conf="${caddyfile}" -quiet=true
EOL

	elif [ "$init" == 'systemd' ]; then

		cat > /etc/systemd/system/caddy.service <<EOL
[Unit]
Description=${caddyname}
After=network.target

[Service]
User=${caddyuser}
LimitNOFILE=4096
PIDFile=/var/run/caddy/caddy.pid
ExecStartPre=[ -f ${caddyfile} ]
ExecStartPre=[ -e ${caddypath}/caddy ]
ExecStartPre=service php5-fpm start
ExecStart=${caddypath}/caddy -conf="${caddyfile}" -quiet=true -pidfile=/var/run/caddy/caddy.pid -agree
Restart=on-failure
StartLimitInterval=600

[Install]
WantedBy=multi-user.target
EOL

	systemctl enable caddy &>/dev/null
	fi
}

deletecaddy () {
	if [[ -e  "$caddypath" ]] ; then
		echo ""
		echo "  Are you sure you want to delete caddy?"
		echo "                 1) YES"
		echo "                 2) NO"
		read -p "  Select an option: " option
		case $option in
			1)
			echo ""
			service caddy stop &>/dev/null
			rm -rf $caddypath #deleting caddy web server folder
			rm $caddyfile #deleting caddyfile
			rm -rf $caddywww #deleting caddy html folder
			userdel $caddyuser #delete caddy user
			init=`cat /proc/1/comm`
			if [ "$init" == 'init' ]; then
				rm /etc/init/caddy.conf
			elif [ "$init" == 'systemd' ]; then
				systemctl disable caddy &>/dev/null
				rm /etc/systemd/system/caddy.service
			fi
			echo "  Caddy has been deleted"
			echo ""
			exit
			;;
			2) exit;;
		esac
		else
		echo ""
		echo "  Looks like Caddy is not installed"
	fi
	echo ""
}

versioninfo () {
	caddyserverversion=`$caddypath/caddy -version | awk '{print $2}'`
	php5fpmversion=`php5-fpm -v | grep built`
	echo ""
	echo "  $caddyname $caddyserverversion"
	echo "  Caddy Web Server Installer - $cwsiv"
	echo "  $php5fpmversion"
	echo ""
}

# See how we were called.
case $1 in
	'-start'|'start' )
		startcaddy;;
	'-stop'|'stop' )
		stopcaddy;;
	'-restart'|'restart'|'-reload'|'reload' )
		stopcaddy; startcaddy;;
	'-status'|'status' )
		caddystatus;;
	'-install'|'install' )
		installcaddy; caddyfile;;
	'-update'|'update' )
		updatecaddy;;
	'-service'|'service' )
		makeservice;;
	'-del'|'delete'|'-rm' )
		deletecaddy;;
	'-about'|'about' )
		about;;
	'-h'|'help' )
		prms;;
	'-v'|'version'|'-version' )
		versioninfo;;
	*)
		caddystatus; howto;;
esac
exit 1
